{"version":3,"sources":["PlotCanvas.js","PlotSVG.js","App.js","index.js"],"names":["PlotCanvas","props","ref","useRef","xScale","d3","domain","range","yScale","shape","data","size","opacity","useEffect","draw","width","height","oldAlpha","t0","Date","now","g","current","getContext","globalAlpha","fillStyle","fillRect","lineWidth","strokeStyle","forEach","datum","beginPath","x","Math","round","y","moveTo","arc","PI","strokeRect","stroke","t1","font","fillText","PlotSVG","svg","allShapes","selectAll","length","remove","append","attr","style","select","text","App","useState","setSize","getData","getPower","setData","setOpacity","className","Slider","defaultValue","step","min","max","valueLabelDisplay","marks","onChangeCommitted","event","value","valueLabelFormat","href","n","f","i","exp","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e25e9c67.chunk.js","sourcesContent":["import React, { useRef, useEffect }  from 'react';\nimport * as d3 from 'd3';\nimport './PlotCanvas.css';\n\n/**\n * Scatter plot in a CANVAS element.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst PlotCanvas = ( props ) => {\n    \n    // Create reference and scales.\n    const width = 300, height = 300;\n    let ref = useRef(),\n        xScale = d3.scaleLinear().domain([ 0, 1 ]).range([ 0, width ]),\n        yScale = d3.scaleLinear().domain([ 0, 1 ]).range([ height, 0 ]),\n        { shape, data, size, opacity } = props;\n    \n    // Hook to draw on mounting, or on any other lifecycle update.\n    useEffect(() => {\n        PlotCanvas.draw( width, height, ref, xScale, yScale, shape, data, size, opacity );\n    });\n                         \n    // Return the component.\n    return <canvas width={width} height={height} ref={ref}></canvas>;\n}\n\n/**\n * Draws the points and the time.\n *\n * @param {number}     width    width, in pixels\n * @param {number}     height   height, in pixels\n * @param {Array}      ref      reference to SVG element\n * @param {d3.scale*}  xScale   X scale\n * @param {d3.scale*}  yScale   Y scale\n * @param {string}     shape    one of \"circle\", \"square\"\n * @param {Array}      data     Array of x, y values between 0 and 1\n * @param {number}     size     size in pixels\n * @param {number}     opacity  alpha, between 0 and 1\n */\nPlotCanvas.draw = ( width, height, ref, xScale, yScale, shape, data, size, opacity ) => {\n\n    // Initialization.\n    let t0 = Date.now(),\n        canvas = ref.current,\n        g = canvas.getContext( \"2d\" ),\n        oldAlpha;\n    \n    // Draw the points.  +0.5 minimizes anti-aliasing.\n    if( g ) {\n        oldAlpha = g.globalAlpha;\n        g.fillStyle = \"#ffffff\";\n        g.fillRect( 0, 0, width, height );\n        g.lineWidth = 1;\n        g.strokeStyle = \"#000000\";\n        g.globalAlpha = opacity;\n        data.forEach( datum => {\n            g.beginPath();\n            let x = Math.round( xScale( datum[ 0 ])) + 0.5,\n                y = Math.round( yScale( datum[ 1 ])) + 0.5;\n            if( shape === \"circle\" ) {\n                g.moveTo( x + size / 2, y );\n                g.arc( x, y, size / 2, 0, 2 * Math.PI, true );\n            } else {\n                g.strokeRect( x, y, size, size );\n            }\n            g.stroke();\n        });\n        g.globalAlpha = oldAlpha;\n        let t1 = Date.now() - t0;\n                         \n        // Draw the time.\n        g.fillStyle = \"#000000\";\n        g.font = \"16px sans-serif\";\n        g.fillText( \"CANVAS \" + shape + \"s: \" + t1 + \" msec\", 10, height - 10 );\n    }\n}\n\nexport default PlotCanvas;\n","import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport './PlotSVG.css';\n\n/**\n * Scatter plot in an SVG element.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst PlotSVG = ( props ) => {\n    \n    // Create reference and scales.\n    const width = 300, height = 300;\n    let ref = useRef(),\n        xScale = d3.scaleLinear().domain([ 0, 1 ]).range([ 0, width ]),\n        yScale = d3.scaleLinear().domain([ 0, 1 ]).range([ height, 0 ]),\n        { shape, data, size, opacity } = props;\n    \n    // Set hook to draw on mounting.\n    useEffect(() => {\n        PlotSVG.draw( height, ref, xScale, yScale, shape, data, size, opacity );\n    });\n    \n    // Return the component.\n    return <svg width={width} height={height} ref={ref}></svg>;\n};\n\n/**\n * Draws the points and the time.\n *\n * @param {number}     height   height in pixels\n * @param {Array}      ref      reference to SVG element\n * @param {d3.scale*}  xScale   X scale\n * @param {d3.scale*}  yScale   Y scale\n * @param {string}     shape    one of \"circle\", \"square\"\n * @param {Array}      data     Array of x, y values between 0 and 1\n * @param {number}     size     size in pixels\n * @param {number}     opacity  alpha, between 0 and 1\n */\nPlotSVG.draw = ( height, ref, xScale, yScale, shape, data, size, opacity ) => {\n    \n    // If the data changed, re-create the SVG elements.  +0.5 minimizes anti-aliasing.\n    const svg = d3.select( ref.current );\n    let allShapes = svg.selectAll(( shape === \"circle\" ) ? \"circle\" : \"rect\" );\n    if( allShapes.size() !== data.length ) {\n        allShapes.remove();\n        if( shape === \"circle\" ) {\n            data.forEach(( datum ) => {\n                svg.append( \"circle\" )\n                    .attr( \"cx\", Math.round( xScale( datum[ 0 ]) + 0.5 ))\n                    .attr( \"cy\", Math.round( yScale( datum[ 1 ]) + 0.5 ))\n                    .style( \"fill\", \"none\" )\n                    .style( \"stroke\", \"black\" );\n            });\n        } else {\n            data.forEach(( datum ) => {\n                svg.append( \"rect\" )\n                    .attr( \"x\", Math.round( xScale( datum[ 0 ]) + 0.5 ))\n                    .attr( \"y\", Math.round( yScale( datum[ 1 ]) + 0.5 ))\n                    .style( \"fill\", \"none\" )\n                    .style( \"stroke\", \"black\" );\n            });\n        }\n        svg.selectAll( \"text\" ).remove();\n        svg.append( \"text\" );\n    }\n        \n    // Draw the points.\n    let t0 = Date.now();\n    if( shape === \"circle\" ) {\n        svg.selectAll( \"circle\" )\n            .attr( \"r\", size / 2 )\n            .style( \"opacity\", opacity )\n    } else {\n        svg.selectAll( \"rect\" )\n            .attr( \"width\", size )\n            .attr( \"height\", size )\n            .style( \"opacity\", opacity )\n    }\n    let t1 = Date.now() - t0;\n                  \n    // Draw the time.\n    svg.select( \"text\" )\n        .attr( \"x\", 10 )\n        .attr( \"y\", height - 10 )\n        .text( \"SVG \" + shape + \"s: \" + t1 + \"  msec\" );\n};\n\nexport default PlotSVG;\n","import React, { useState } from 'react';\nimport { Slider } from '@mui/material';\nimport * as d3 from 'd3';\nimport PlotCanvas from './PlotCanvas';\nimport PlotSVG from './PlotSVG';\nimport './App.css';\n\n/**\n * A grid of performance tests.\n */\nconst App = () => {\n    \n    // Create state.\n    const [ size, setSize ] = useState( 4 );\n    const [ data, setData ] = useState( App.getData( App.getPower( 9 )));\n    const [ opacity, setOpacity ] = useState( 0.5 );\n    \n    // Return the App.\n    return (\n        <div className=\"Column\">\n            <div className=\"Description\">\n                <h1>SVG Versus CANVAS</h1>\n            </div>\n            <div className=\"GridPlots\">\n                <PlotSVG    shape={\"square\"} size={size} data={data} opacity={opacity} />\n                <PlotCanvas shape={\"square\"} size={size} data={data} opacity={opacity} />\n            </div>\n            <div className=\"GridControls\">\n                <label>Size:</label>\n                <Slider defaultValue={ 4 } step={ 1 } min={ 0 } max={ 10 }\n                    valueLabelDisplay=\"auto\" marks\n                    onChangeCommitted={( event, value ) => setSize( value )} />\n                <label>Points:</label>\n                <Slider defaultValue={ 9 } step={ 1 } min={ 0 } max={ 15 }\n                    valueLabelDisplay=\"auto\" marks valueLabelFormat={( value ) => App.getPower( value )}\n                    onChangeCommitted={( event, value ) => setData( App.getData( App.getPower( value )))} />\n                <label>Transparency:</label>\n                <Slider defaultValue={ 0.5 } step={ 0.01 } min={ 0 } max={ 1 }\n                    valueLabelDisplay=\"auto\"\n                    onChangeCommitted={( event, value ) => setOpacity( 1 - value )} />\n            </div>\n            <div className=\"Description\">\n                <p>\n                Scatter plots have been used to display up to 1,000,000 data points (for example, <a href=\"https://www.highcharts.com/demo/android/scatter-boost\">here</a> and <a href=\"https://blog.scottlogic.com/2020/05/01/rendering-one-million-points-with-d3.html\">here</a>).  With suitably adjusted point size and opacity, these plots are superior to contour plots because they show both the structure of the data and the individual points.\n                </p>\n                <p>\n                Even in modern browsers, the SVG element cannot support such large data sets.  This type of plot requires a CANVAS element.  The performance difference becomes critical during user interactions such as brushing.\n                </p>\n            </div>\n            <a href=\"https://github.com/hemanrobinson/svg-canvas/\">Code Shared on GitHub</a>\n        </div>\n    );\n}\n\n/**\n * Generates bivariate random normal data.\n *\n * @param  {number}  n  number of values\n * @return {Array}  Array of x, y values between 0 and 1\n */\nApp.getData = ( n ) => {\n    let data = [],\n        f = d3.randomNormal( 0.5, 0.1 );\n    for( let i = 0; ( i < n ); i++ ) {\n        data[ i ] = [ f(), f()];\n    }\n    return data;\n}\n\n/**\n * Returns \"nice\" power of ten:  rounded to 1, 2, 5, 10, 20, 50, etc.\n *\n * @param  {number}  exp  exponent\n * @return {number}  \"nice\" power of ten:  rounded to 1, 2, 5, 10, 20, 50, etc.\n */\nApp.getPower = ( exp ) => {\n    let m = (( exp % 3 ) === 0 ) ? 1 : (( exp % 3 ) === 1 ) ? 2 : 5;\n    return m * ( 10 ** Math.floor( exp / 3 ));\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Render the app.\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById( 'root' )\n);\n"],"sourceRoot":""}